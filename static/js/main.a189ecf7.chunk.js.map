{"version":3,"sources":["components/Wrapper/index.js","components/Header/index.js","components/Card/index.js","App.js","index.js"],"names":["Wrapper","props","className","children","Header","score","highscore","loss","win","Card","alt","name","src","image","onClick","cardClicked","id","App","state","characters","clicked","picClick","trackClick","correctClicks","updateHighScore","updateLosses","updateWins","imgShuffle","sort","Math","random","includes","push","setState","this","map","character","key","Component","ReactDOM","render","document","getElementById"],"mappings":"wgDAOeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCyB1BC,MA1Bf,SAAgBH,GACd,OACE,yBAAKC,UAAU,2BACb,wBAAIA,UAAU,aAAd,4BAEA,yBAAKA,UAAU,YACb,wBAAIA,UAAU,0BACZ,wBAAIA,UAAU,YAAd,mBACmBD,EAAMI,OAEzB,wBAAIH,UAAU,YAAd,mBACmBD,EAAMK,WAEzB,wBAAIJ,UAAU,YAAd,WACWD,EAAMM,MAEjB,wBAAIL,UAAU,YAAd,SACSD,EAAMO,S,MCPVC,MAVf,SAAcR,GACZ,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKQ,IAAKT,EAAMU,KAAMC,IAAKX,EAAMY,MAAOC,QAAS,kBAAMb,EAAMc,YAAYd,EAAMe,U,OC0ExEC,E,2MA1EbC,MAAQ,CACNC,aACAd,MAAO,EACPC,UAAW,EACXC,KAAM,EACNC,IAAK,EACLY,QAAS,I,EAGXC,SAAW,SAAAL,GACT,IAAIM,EAAa,EAAKJ,MAAME,QAExBG,EAAgB,EAChBC,EAAkB,EAAKN,MAAMZ,UAC7BmB,EAAe,EAAKP,MAAMX,KAC1BmB,EAAa,EAAKR,MAAMV,IACxBmB,EAAaR,EAAWS,KAAM,kBAAMC,KAAKC,SAAU,KACnD,EAAKZ,MAAME,QAAQW,SAASf,IAC9BM,EAAa,GACbG,IACAF,EAAgB,IAGhBD,EAAWU,KAAKhB,IAChBO,EAAgB,EAAKL,MAAMb,MAAQ,GACf,EAAKa,MAAMZ,WAEL,MADxBkB,EAAkBD,KAEhBG,IACAJ,EAAa,GACbC,EAAgB,IAKtB,EAAKU,SAAS,CACZd,WAAYQ,EACZtB,MAAOkB,EACPjB,UAAWkB,EACXjB,KAAMkB,EACNjB,IAAKkB,EACLN,QAASE,K,wEAIH,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACAjB,MAAS6B,KAAKhB,MAAMb,MACpBC,UAAa4B,KAAKhB,MAAMZ,UACxBC,KAAQ2B,KAAKhB,MAAMX,KACnBC,IAAO0B,KAAKhB,MAAMV,MAElB,kBAAC,EAAD,KACD0B,KAAKhB,MAAMC,WAAWgB,IAAI,SAAAC,GAAS,OAClC,kBAAC,EAAD,CACEpB,GAAIoB,EAAUpB,GACdH,MAAOuB,EAAUvB,MACjBF,KAAMyB,EAAUzB,KAChBI,YAAe,EAAKM,SACpBgB,IAAKD,EAAUpB,a,GA9DPsB,a,MCDlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.a189ecf7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg\">\r\n      <h1 className=\"col-sm-10\">Harry Potter Memory Game</h1>\r\n\r\n      <div className=\"col-sm-2\" >\r\n        <ul className=\"navbar-nav flex-column\">\r\n          <li className=\"nav-item\">\r\n            Correct Clicks: {props.score}\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            Highest Clicks: {props.highscore}\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            Losses: {props.loss}\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            Wins: {props.win}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n    \r\n  )\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} onClick={() => props.cardClicked(props.id)}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Card from \"./components/Card\";\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n  state = {\n    characters,\n    score: 0,\n    highscore: 0,\n    loss: 0,\n    win: 0,\n    clicked: []\n  };\n\n  picClick = id => {\n    let trackClick = this.state.clicked\n    // console.log(trackClick)\n    let correctClicks = 0\n    let updateHighScore = this.state.highscore\n    let updateLosses = this.state.loss\n    let updateWins = this.state.win\n    let imgShuffle = characters.sort( () => Math.random() -0.5);\n    if (this.state.clicked.includes(id)) {\n      trackClick = []\n      updateLosses++\n      correctClicks = 0\n    }\n    else {\n      trackClick.push(id)\n      correctClicks = this.state.score + 1\n      if (correctClicks > this.state.highscore) {\n        updateHighScore = correctClicks\n        if (updateHighScore === 12){\n          updateWins++\n          trackClick = []\n          correctClicks = 0\n        }\n      }\n    }\n\n    this.setState({\n      characters: imgShuffle,\n      score: correctClicks,\n      highscore: updateHighScore,\n      loss: updateLosses,\n      win: updateWins,\n      clicked: trackClick\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Header \n        score = {this.state.score}\n        highscore = {this.state.highscore}\n        loss = {this.state.loss}\n        win = {this.state.win}>\n        </Header> \n        <Wrapper>\n      {this.state.characters.map(character => (\n        <Card \n          id={character.id}\n          image={character.image}\n          name={character.name}\n          cardClicked = {this.picClick}\n          key={character.id}\n        />\n      ))}\n    </Wrapper>\n      </div>      \n    );\n  }\n\n  // how to shuffle images: \n  // const newArray = this.state.characters.sort( () => Math.random() -0.5)\n  // this.setState({ characters: newArray })\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./style.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}